type Gene {
  geneInfo: GeneInfo!
  products: [Products]
  shineDalgarno: [ShineDalgarno]
  regulation: Regulation!
  growthConditions: [GrowthConditions]
  organismName: String
  schemaVersion: Float
}

type GeneInfo {
  id: String
  name: String
  leftEndPosition: Int
  rightEndPosition: Int
  strand: String
  sequence: String
  gcContent: Float
  centisomePosition: Float
  note: String
  type: String
  synonyms: [String]
  terms: [Terms]
  externalCrossReferences: [ExternalCrossReferences]
  evidenceReferences: [EvidenceReferences]
}

type Products {
  product_id: String
  name: String
  type: String
  sequence: String
  note: String
  molecularWeight: Float
  isoelectricPoint: Float
  cellularLocation: String
  anticodon: String
  synonyms: [String]
  motifs: [Motifs]
  externalCrossReferences: [ExternalCrossReferences]
  evidenceReferences: [EvidenceReferences]
  isRegulator: Boolean
  regulator_id: String
}

type Motifs {
  leftEndPosition: Int
  rightEndPosition: Int
  sequence: String
  description: String
  type: String
  note: String
}

type ShineDalgarno {
  distanceToGene: Int
  leftEndPosition: Int
  rightEndPosition: Int
  sequence: String
  note: String
}

type Regulation {
  operon: Operon
  regulators: [Regulators]
  context: [Context]
  statistics: Statistics
}

type Operon {
  id: String
  name: String
  arrangement: [Arrangement]
}


type Arrangement {
  regulator: Regulator
  promoter: Promoter
  transcriptionUnit: TranscriptionUnit
}

type Regulator {
  id: String
  name: String
  type: String
}

type Promoter {
  id: String
  name: String
}

type TranscriptionUnit {
  id: String
  name: String
}

type Regulators {
  id: String
  name: String
  type: String
}

type Context {
  type: String
  name: String
  leftEndPosition: Int
  rightEndPosition: Int
  strand: String
  note: String
  evidenceReferences: [EvidenceReferences]
}

type Statistics {
  regulators: Int
  regulatoryInteractions: Int
  promoters: Int
}

type GrowthConditions {
  controlCondition: String
  experimentalCondition: String
  effect: String
  evidenceReferences: [EvidenceReferences]
}

type GenesResult { 
  """
  contains server response
  """
  data: [Gene]
  """
  contains pagination info
  """
  pagination: Pagination
}

type Query {
  """
  #### name
  getAllGenes
  #### description
  List all the genes contained in collection
  """
  getAllGenes(
    "**limit**: defines the page results showed (10 by default)"
    limit: Int, 
    "**page**: select the current result page (0 by default)"
    page: Int): GenesResult! 
  
  
  """
  #### name
  getGenesBy
  #### description
  List the genes obtained by a search or advancedSearch String
  #### example
  ```json
  {
    getGenesBy(args){
      data{
        fields_to_show
      }
      pagination{
        fields_to_show
      }
    }
  }
  ```
  """
  getGenesBy(
    """
    usable for text search on fields defined in \"Properties\" parameter; syntax; 
    supports logic operators (AND,OR,NOT). **eg**: \"arad AND arac OR \"biosynthesis of macromolecules\"\"
    """
    search: String, 
    """
    usable for queries that require advanced control, uses a \"value[field]\" syntax; 
    supports logic operators (AND,OR,NOT). **eg**: \"(arac|arad[geneInfo.name] AND reverse[geneInfo.strand])\"
    """
    advancedSearch: String, 
    "defines the page results showed (10 by default)"
    limit: Int, 
    "select the current result page (0 by default)"
    page: Int, 
    "select the fields to be queried by \"search\" (by default geneInfo[id, name, synonyms] and products[name])"
    properties: [String], 
    "usable for specific organismName queries"
    organismName: String, 
    "define if \"search\" will be Case Sensitive and cannot be a substring (by default is false)"
    fullMatchOnly: Boolean): GenesResult! 
}
 