type GeneData {
  id: String
  gene: Gene
  products: [Products]
  shineDalgarnos: [ShineDalgarnos]
  regulation: Regulation
  growthConditions: [GrowthConditions]
  organism: Organism
  allEvidenceReferences: [EvidenceReferences]
  schemaVersion: Float
}

"This contains all data of Gene properties"
type Gene {
  "It is the ID of RegulonDB associated with the gene"
  id: String
  """
  The primary name by which an object is known to scientists. 
  Typically the name will be a standard name or a widely used and familiar name.
  """
  name: String
  "Encodes the position of the left end of the region (inclusive)"
  leftEndPosition: Int
  "Encodes the position of the right end of the region (inclisive)"
  rightEndPosition: Int
  "Indicates the direction of the transcription of gene"
  strand: String
  "Sequence used by the gene"
  sequence: String
  "The percentage of GC found in the sequence"
  gcContent: Float
  "This slot lists the map position of this gene on the chromosome in centisome units."
  centisomePosition: Float
  "Stores a general commeny about the object that contains the column"
  note: String
  "Describes the type of the Gene"
  type: String
  "Contains all the synonyms for this Gene"
  synonyms: [String]
  "Identifying multifunctional genes"
  multifunTerms: [MultifunTerms]
  "All external references of this Gene information"
  externalCrossReferences: [ExternalCrossReferences]
  "All references of this Gene information"
  evidenceReferences: [EvidenceReferences]
}

type MultifunTerms {
  geneIds:[String]
  id: String
  label: String
  name: String
}

type Products {
  "It is the ID of RegulonDB associated with the product"
  id: String
  "The primary name by which an object is known to scientists."
  name: String
  "Describes the type of the Product"
  type: String
  "It is the sequence used by the product "
  sequence: String
  "note of the Product"
  note: String
  "A molecular weight as computed from an amino-aid sequence."
  molecularWeight: String
  "Is a percentage the pH at which the amino acid does not migrate in an electric field."
  isoelectricPoint: Float
  "cellularLocations of the Product"
  cellularLocations: [String]
  "anticodon of the Product"
  anticodon: String
  "synonyms of the Product"
  synonyms: [String]
  "motifs of the Product"
  motifs: [Motifs]
  "All external references of this Product information"
  externalCrossReferences: [ExternalCrossReferences]
  "All references of this Product information"
  evidenceReferences: [EvidenceReferences]
  "Confirms if is a Regulator"
  isRegulator: Boolean
  "Id of Regulon"
  regulonId: String
  "geneOntologyTerms of the Product"
  geneOntologyTerms: [GeneOntologyTerms]
}

type Motifs {
  leftEndPosition: Int
  rightEndPosition: Int
  sequence: String
  description: String
  type: String
  note: String
}

type ShineDalgarnos {
  distanceToGene: Int
  id: String
  leftEndPosition: Int
  rightEndPosition: Int
  sequence: String
  note: String
}

type Regulation {
  operon: Operon
  regulators: [Regulators]
  context: [Context]
  statistics: Statistics
}

type Operon {
  id: String
  name: String
  arrangement: [Arrangement]
}


type Arrangement {
  regulator: [Regulators]
  promoters: [Promoter]
  transcriptionUnit: TranscriptionUnit
}

type Regulators {
  id: String
  name: String
  type: String
  function: String
}

type Promoter {
  id: String
  name: String
}

type TranscriptionUnit {
  id: String
  name: String
}

type Context {
  id: String
  type: String
  name: String
  leftEndPosition: Int
  rightEndPosition: Int
  strand: String
  note: String
  evidenceReferences: [EvidenceReferences]
}

type Statistics {
  regulators: Int
  regulatoryInteractions: Int
  promoters: Int
}

type GrowthConditions {
  id: String
  controlCondition: String
  experimentalCondition: String
  effect: String
  evidenceReferences: [EvidenceReferences]
}

type Organism {
  id: String
  name: String
}

type GenesResult { 
  """
  contains server response
  """
  data: [GeneData]
  """
  contains pagination info
  """
  pagination: Pagination
}

type Query {
  """
  #### name
  getAllGenes
  #### description
  List all the genes contained in collection
  """
  getAllGenes(
    "**limit**: defines the page results showed (10 by default)"
    limit: Int, 
    "**page**: select the current result page (0 by default)"
    page: Int): GenesResult! 
  
  
  """
  #### name
  getGenesBy
  #### description
  List the genes obtained by a search or advancedSearch String
  #### example
  ```json
  {
    getGenesBy(args){
      data{
        fields_to_show
      }
      pagination{
        fields_to_show
      }
    }
  }
  ```
  """
  getGenesBy(
    """
    usable for text search on fields defined in \"Properties\" parameter; syntax; 
    supports logic operators (AND,OR,NOT). **eg**: \"arad AND arac OR \"biosynthesis of macromolecules\"\"
    """
    search: String, 
    """
    usable for queries that require advanced control, uses a \"value[field]\" syntax; 
    supports logic operators (AND,OR,NOT). **eg**: \"(arac|arad[geneInfo.name] AND reverse[geneInfo.strand])\"
    """
    advancedSearch: String, 
    "defines the page results showed (10 by default)"
    limit: Int, 
    "select the current result page (0 by default)"
    page: Int, 
    "select the fields to be queried by \"search\" (by default geneInfo[id, name, synonyms] and products[name])"
    properties: [String], 
    "usable for specific organismName queries"
    organismName: String, 
    "define if \"search\" will be Case Sensitive and cannot be a substring (by default is false)"
    fullMatchOnly: Boolean): GenesResult! 
}
 